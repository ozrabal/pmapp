export interface ScheduleStageViewModel {
  id: string; // Unique ID for the stage
  name: string; // Stage name
  description: string; // Stage description
  dependencies: string[]; // IDs of dependent stages
  relatedBlocks: string[]; // IDs of related functional blocks
  order: number; // Stage order

  // UI-only fields
  isExpanded?: boolean; // Whether the stage is expanded
  isEditing?: boolean; // Whether the stage is being edited
  validationErrors?: Record<string, string>; // Validation errors
}

export interface ProjectScheduleViewModel {
  stages: ScheduleStageViewModel[]; // List of schedule stages

  // Metadata fields
  lastUpdated?: string; // Last update date
  isGeneratedByAI?: boolean; // Whether generated by AI
}

export interface ScheduleDependencyViewModel {
  id: string; // Stage ID
  name: string; // Stage name for display
  isSelected: boolean; // Whether the dependency is selected
}

export interface StageFormValues {
  name: string; // Stage name
  description: string; // Stage description
  dependencies: string[]; // IDs of dependent stages
}

export interface ScheduleContextValue {
  schedule: ProjectScheduleViewModel | null; // Schedule data
  isLoading: boolean; // Loading state
  isGenerating: boolean; // AI generation state
  error: string | null; // Error message
  editingStage: ScheduleStageViewModel | null; // Currently editing stage
  isModalOpen: boolean; // Modal open state
  setEditingStage: (stage: ScheduleStageViewModel | null) => void; // Set editing stage
  setIsModalOpen: (isOpen: boolean) => void; // Set modal open state

  // Functions
  generateSchedule: () => Promise<void>;
  updateSchedule: (updatedSchedule: ProjectScheduleViewModel) => Promise<void>;
  addStage: (stage: Omit<ScheduleStageViewModel, "id">) => Promise<void>;
  updateStage: (stageId: string, updates: Partial<ScheduleStageViewModel>) => Promise<void>;
  deleteStage: (stageId: string) => Promise<void>;
  reorderStages: (sourceId: string, destinationId: string) => Promise<void>;
}
